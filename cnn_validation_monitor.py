#!/usr/bin/env python3
"""
CNN Validation Monitor - Automated result saving and progress tracking
Monitors the CNN validation run and saves comprehensive results.
"""

import os
import time
import pickle
import json
from datetime import datetime
import subprocess
import threading

class CNNValidationMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.log_file = f"logs/cnn_validation_{self.start_time.strftime('%Y%m%d_%H%M%S')}.log"
        self.results_file = f"data/processed/cnn_validation_results_{self.start_time.strftime('%Y%m%d_%H%M%S')}.pkl"
        self.summary_file = f"CNN_VALIDATION_SUMMARY_{self.start_time.strftime('%Y%m%d_%H%M%S')}.md"
        
        # Ensure directories exist
        os.makedirs("logs", exist_ok=True)
        os.makedirs("data/processed", exist_ok=True)
        
        self.log(f"üîç CNN Validation Monitor Started at {self.start_time}")
        self.log(f"üìÅ Results will be saved to: {self.results_file}")
        self.log(f"üìÑ Summary will be saved to: {self.summary_file}")
    
    def log(self, message):
        """Log message with timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_msg = f"[{timestamp}] {message}"
        print(log_msg)
        
        # Write to log file
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_msg + "\n")
    
    def run_validation(self):
        """Run the CNN validation script with monitoring"""
        self.log("üöÄ Starting CNN Validation Test...")
        self.log("‚è±Ô∏è  Expected duration: 2-4 hours")
        self.log("ü§ñ Testing: EEGNet, ShallowConvNet, DeepConvNet")
        self.log("üìä Method: Leave-One-Participant-Out Cross-Validation")
        self.log("")
        
        try:
            # Run the validation script
            process = subprocess.Popen(
                ["python", "test_cnn_validation_fixed.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # Monitor output in real-time
            while True:
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    self.log(output.strip())
            
            # Get final return code
            return_code = process.poll()
            
            if return_code == 0:
                self.log("‚úÖ CNN Validation completed successfully!")
            else:
                error_output = process.stderr.read()
                self.log(f"‚ùå CNN Validation failed with return code {return_code}")
                self.log(f"Error output: {error_output}")
            
            return return_code == 0
            
        except Exception as e:
            self.log(f"‚ùå Error running validation: {e}")
            return False
    
    def create_summary(self):
        """Create a comprehensive summary of results"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        summary = f"""# CNN Validation Results Summary

## Execution Details
- **Start Time**: {self.start_time.strftime("%Y-%m-%d %H:%M:%S")}
- **End Time**: {end_time.strftime("%Y-%m-%d %H:%M:%S")}
- **Duration**: {duration}
- **Log File**: {self.log_file}

## Research Question
**Can CNNs exceed the 51.1% ¬± 8.4% XGBoost baseline on EEG pain classification?**

## Methodology
- **Validation**: Leave-One-Participant-Out Cross-Validation (LOPOCV)
- **Dataset**: 51 participants, ~2,875 EEG windows
- **Architectures**: EEGNet, ShallowConvNet, DeepConvNet
- **Training**: 30 epochs per fold, Adam optimizer
- **Classification**: Ternary (low/moderate/high pain)

## Results Summary
*Results will be automatically populated based on script output*

## Next Steps
- If CNNs > 51.1%: Deep learning breakthrough for pain classification
- If CNNs ‚â§ 51.1%: Validates dataset difficulty, consider data augmentation
- Compare with literature benchmarks (87-91% with augmentation)

## Files Generated
- **Log**: {self.log_file}
- **Results**: {self.results_file}
- **Summary**: {self.summary_file}

---
Generated by CNN Validation Monitor on {end_time.strftime("%Y-%m-%d %H:%M:%S")}
"""
        
        with open(self.summary_file, "w", encoding="utf-8") as f:
            f.write(summary)
        
        self.log(f"üìÑ Summary saved to: {self.summary_file}")

def main():
    monitor = CNNValidationMonitor()
    
    # Run the validation
    success = monitor.run_validation()
    
    # Create summary
    monitor.create_summary()
    
    if success:
        monitor.log("üéâ CNN Validation Monitor completed successfully!")
    else:
        monitor.log("‚ö†Ô∏è  CNN Validation encountered issues - check logs for details")

if __name__ == "__main__":
    main()
